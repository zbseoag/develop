现代计算机系统的体系结构和基本工作原理最初由冯•诺依曼于1946年提出，以此为基础的计算机统称为冯•诺依曼计算机。

冯•诺依曼计算机的主要特点可以归纳为：
►①计算机由5个基本部分组成，分别是运算器、控制器、存储器、输入设备和输出设备。
►②采用“存储程序”思想，程序和数据均以二进制表示，以相同方式存放在存储器中，按地址寻访。

1．运算器
►运算器又称算术逻辑单元ALU（arithmetic logic unit），主要功能是进行算术运算和逻辑运算。

2．控制器
►控制器由程序计数器PC、指令寄存器IR、指令译码器ID、时序控制电路等组成，指挥计算机的各个部件按照计算机指令的要求协调工作。
中央处理器CPU（central processing unit）是计算机中最重要的一个部件，由运算器和控制器组成。

3．存储器
►存储器是计算机用来存放数据的记忆装置，通常分为内存储
器和外存储器。

►内存储器简称为内存或主存，用来存放执行的程序及其数据；内存划分为很多单元，称为“内存单元”，存放一定数量的二进制数据。
每个内存单元都有唯一的编码，称为内存单元的地址。当计算机要从某个内存单元存取数据时，首先要提供地址信息，进而查找到相应的内存单元（称为寻址）才读取数据。

存储器容量是指存储器中最多可存放二进制数据的总和，其基本单位是字节（byte），每个字节包含8个二进制位（bit）。
常用以下单位表示：KB、MB、GB、TB，它们之间的换算关系是：1KB=1024B、1MB=1024KB、1GB=1024MB、1TB=1024GB。

4．输入设备
►输入设备用来接受用户输入的程序和数据信息，将它们转换为计算机可以处理的二进制形式数据存放到内存中。
►常见的输入设备有键盘、鼠标、触摸屏、手写板、扫描仪、光笔、数字化仪、A/D转换器等。

►5．输出设备
►输出设备用来将存放在内存中的计算机处理结果，以人们能够识别的形式表现出来。
►常见的输出设备有显示器、打印机、绘图仪、D/A转换器等


6．用途各异的计算机
►随着计算机技术的发展和应用的推动，计算机的类型越来越多样化，主要有高性能计算机、微型计算机、工作站、服务器、嵌入式计算机等。
►计算机类型主要有高性能计算机、微型计算机、工作站、服务器、嵌入式计算机等。


树莓派
Raspberry Pi(中文名为“树莓派”,简写为RPi，或者RasPi/RPi)是为学生计算
机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于Linux。

►1．指令
►指令（instruction）是计算机执行某种操作的机器命令，它可以被计算机硬件直接识别和执行。计算机指令常用二进制代码表示，一条指令通常由两个部分组成：操作码和操作数。

►一台计算机所有指令的集合称为指令系统。不同类型的计算机，指令类型和数量是不同的。一般地，指令系统应具有以下功能的指令：
►①数据传送指令, 将数据在CPU与内存之间进行传送；
►②数据处理指令,对数据进行算术、逻辑、比较、位运算；
►③程序控制指令, 控制程序中指令的执行顺序，例如条件跳转、无条件跳转、调用、返回、停机、中断、异常处理等；
►④输入输出指令,实现外部设备与主机之间的数据传输；
►⑤硬件管理指令,对计算机硬件管理；
►⑥其他指令,特殊功能处理，例如多媒体、DSP、通信、图形渲染等。


2．计算机的工作原理
►计算机的工作过程实际上是快速执行指令的过程，指令的执行过程分为以下3个步骤：①取指令 ②分析指令 ③执行指令。

►一条指令执行完成，程序计数器加1或将跳转地址送入程序计数器，继续重复上述步骤执行下一条指令。

早期的计算机是串行地执行指令的，即在任何时刻只执行一条指令，完成后才能执行下一条指令。在此过程中访问某个功能部件时，其他部件是不工作的。
为了提高计算机执行指令的速度，现代的计算机普遍使用指令流水线技术来并行执行指令，首先取指令1，分析指令1的同时取指令2，执行指令1的同时分析指令2并且取指令3，依此类推。

3．程序
►计算机程序（computer program）是指完成一定功能的指令的有序集合。
►运行一个程序的过程就是依次执行每条指令的过程，一条指令执行完成后，为执行下一条指令做好准备，即形成下一条指令地址，继续执行，直到遇到结束程序的指令为止。
►编写程序（简称编程，programming）不仅考验程序员的体力、耐力和意志力，而且还需要程序员的智力、想象力和创造力。

►计算机程序是数据流和控制流的工作过程。
• 数据流是指对数据形式的表示和描述，即程序所使用数据的数据结构和组织形式。
• 控制流是对数据所进行操作的描述，即指定操作的步骤和方法，称为算法（algorithm）。
• 因此一个程序包含算法和数据两部分，没有数据，程序就没有运算处理的对象，而处理数据对象的算法是程序的灵魂。

►准确描述数据和设计正确算法是程序设计的两个关键点。以它们作为重要线索出发，结合科学的程序设计方法，就能设计出完成指定任务的程序。程序设计＝算法+数据结构+程序设计方法。

4．软件
►软件（software）是指程序、程序运行所需要的数据以及开发、使用和维护这些程序所需要的文档的集合。

►计算机软件极为丰富，一般将其分为系统软件和应用软件两大类。

►程序设计是现实问题求解的过程，是软件开发中的重要组成部分。程序设计往往以某种程序语言为工具，包括分析（analysis）、设计（design）、编码（coding）、测试（test）、排错（debug）等不同阶段。
►软件开发过程分为需求分析、概要设计与详细设计、编制程序、软件测试、软件维护5个阶段。无论从规模或是质量方面，软件开发对程序员都提出了更高的要求。

►1．计算机中的数
►各种信息进入计算机，都要转换成“0”和“1”的二进制形式。
计算机采用二进制的原因是：
①物理上容易实现，可靠性高。
②运算简单，通用性强。
③便于表示和进行逻辑运算。


►十进制数是人类日常生活中使用的计数法，它的数字符号有十个：0、1、2、•••、9，逢十进位。
►计算机中使用的是二进制数0和1，逢二进位。无论哪种数制，都采用进位计数制方式和使用位置表示法，即每一种数制都有固定的基本符号（称为数码），处于不同位置的数码所代表的值是不同的。
►在数字系统中，用r个基本符号（0、1、2、•••、r-1）表示数值，称其为r进制数（radix-r number system），r称为该数制的基数（radix），而数制中每个位置对应的单位值称为位权。


►1．十进制数转换成r进制数：由于整数和小数的转换方法不同，可分别按整数部分和小数部分转换，然后将结果加起来即可。
►十进制整数转换成r进制数是除r取余法：即将十进制整数不断除以r取余数，直到商为0，先得到的余数是 ，最后得到的余数是 ，则就是转换后的r进制数。
►十进制小数转换成r进制数是乘r取整法：即将十进制小数不断乘以r取整数，直到小数部分为0或达到要求的精度为止，将整数自左向右排列，则就是转换后的r进制小数。 


将十进制数12345 转换成二进制数。
解：由于转换的十进制数较大，使用除2取余法转换步骤比较多，这里根据二进制位权关系实现快速转换。
12345 = 8192 + 4096 + 32 + 16 + 8 + 1 = 2^13 + 2^12 + 2^5 + 2^4 + 2^3 + 2^0 = 11000000111001


将十进制数 123 转换成二进制数。
解：由于123靠近128，可以使用二进制减法来转换。
123 = 128 - 5 = 10000000 - 101 = 1111011

►2．r进制数转换成十进制数
►将任意r进制数按照式（1–1）写成按位权展开的多项式，各位数码乘以各自的权值且累加起来，就得到该r进制数对应的十进制数。
►等值的二进制数比十进制数位数要长很多。为了方便起见，在理论分析和程序设计时人们更多使用八进制和十六进制数。

►二进制、八进制、十六进制之间存在特殊关系：
①8^1 = 2^3 即1位八进制数相当于3位二进制数
②16^1 = 2^4 即1位十六进制数相当于4位二进制数。

►根据这种对应关系，它们之间的转换方法：
①二进制数转换成八进制数时，以小数点为中心向左右两边分组，每3位为一组转换成相应的八进制数，两头不足3位用0补。
②二进制数转换成十六进制数时，以小数点为中心向左右两边分组，每4位为一组转换成相应的十六进制数，两头不足4位用0补。
③八进制数与十六进制数互转时，可以借助二进制。


►1．整数在计算机中的表示
►由于计算机只有0和1的数据形式，因此数的正负号也要用0和1编码。通常将一个数的最高二进制位定义为符号位，称为数符，用0表示正数、1表示负数，其余位表示数值。

►在计算机中，作为整体参与运算、处理和传送的一串二进制的位数称为字长，字长一般是8的倍数，例如8位、16位、32位、64位等。
►一个数在计算机中的表示形式称为机器数。假定字长为8位，5的机器数为00000101，–5的机器数为10000101。

►下面介绍原码、反码和补码，为了简单起见，以下假定字长为8位。

►（1）原码
►整数X的原码是数符位0表示正，1表示负，数值部分是X绝对值的二进制表示，记为(X)原。
►原码表示数的范围是 -(2^n-1) + 1 ~ 2^(n-1) - 1 （n为字长）

(+0)原 = 00000000
(-0)原 = 10000000
(+1)原 = 00000001
(-1)原 = 10000001
(+127)原 = 01111111
(-127)原 = 11111111 

►原码表示法编码简单，但它的缺点是运算时要单独考虑符号位和判别0，增加了运算规则的复杂性。


►（2）反码
►对于正数，反码就是原码；对于负数，除数符位不变，其数值位是原码按位取反，记为(X)反。
►反码表示数的范围是 -(2^n-1) + 1 ~ 2^(n-1) - 1 （n为字长）

(+0)反 = 00000000
(-0)反 = 11111111
(-1)反 = 11111110
(-127)反 = 10000000 

►反码运算也不方便，很少使用，一般用来求补码。


►（3）补码
►对于正数，补码与反码、原码都相同；对于负数，数符位为1，然后反码加1，记为(X)补 。

(＋0)补 ＝ 00000000
(-0)补  = (-0)反 + 1 = 11111111 ＋１ ＝ 00000000 
(-1)补  = 11111111
(-127)补 = 10000001 
(-128)补 = 10000000

►由此可见，8位补码表示的最大值为127，最小值为–128，表示数的范围是–128～127，其中0有唯一的编码形式。


►计算（－9）+9的值。
解：(-9)补 = 11110111 (9)补 = 00001001; 11110111 + 00001001 = 1 00000000 = 0 (高位进位溢出)

►计算 65 + 66 的值。
解：(65)补 = 01000001 (66)补 = 01000010; 01000001 + 01000010 = 10000011 = (-125)补 (进位导致符号位改变。计算结果 131 超出有效表示范围 –128～127)



（4）无符号整数
►无符号整数是指没有正负之分的整数。无符号整数总是大于等于0的，其数的表示范围是 ，即二进制的每一位都是数值位。显然，在一定字长情况下，无符号整数的数值比有符号整数的数值大。


►2．浮点数在计算机中的表示
►数学中的实数在计算机中称为浮点数，是指小数点不固定的数。浮点数用二进制表示，但表示方法比整数复杂得多。


►为便于软件的移植，目前大多数计算机都遵守1985年制定的IEEE754浮点数标准（最新标准为IEEE754–2008），主要有单精度浮点数（float或single）和双精度浮点数（double）格式。
►按二进制数据形式，单精度格式具有24位有效数字，总共占用32位；双精度格式具有53位有效数字精度，总共占用64位，相对应的十进制有效数字分别为7位和17位。

►双精度浮点数在计算机中的表示与单精度浮点数类似，只有两点区别：一是双精度浮点数存储时占用8个字节，即64位。其中 占1位， 占11位， 占52位；二是指数。

►1．西文字符
►西文字符包含英文字符、数字、各种符号，是不可做数学运算的数据。西文字符按特定的规则进行二进制编码才能进入计算机，最常用的是美国信息交换标准代码 ASCII


►计算机存储与处理一般以字节为单位，因此西文字符的一个字符在计算机内部实际是用8位表示的。

►2．汉字字符
►汉字字符种类多，编码上比西文字符复杂。在汉字处理系统中，需要在输入、内部处理、输出对汉字字符编码及转换。因此汉字字符编码有输入码、字形码、国标码、机内码之分。
输入码是键盘输入汉字时所用的编码，字形码用于汉字的显示和打印输出。

►汉字国标码是指我国在1980年发布的《中华人民共和国国家标准信息交换汉字编码》GB2312-80，它把最常用的6763个汉字和682个非汉字图形符号按汉语拼音顺序和偏旁部首排列。

►汉字国标码与区位码的关系
►为了在计算机内部方便区分汉字编码和ASCII码，将国标码的
每个字节的最高位设置成1，变换后的国标码称为汉字机内
码，即： 汉字机内码＝汉字国标码 区位码 +8080H= +A0A0H
►这样在文字处理系统中，字节值大于128的字符是汉字机内码，字节值小于128的字符是ASCII码

►3．多媒体信息
►除数值、文字数据外，计算机也可以处理图形、图像、音频和视频信息。这些媒体信息的表现方式可以说是多种多样，但是在计算机中它们都是通过二进制编码表示的。

►数字音频是由A/D（模拟/数字）转换器用一定采样频率采样、量化音频信号，然后使用固定二进制位记录量化值以数字声波文件的形式存储在计算机中。若要输出数字声音，必须通过D/A（数字/模拟）转换器将数字信号转换成模拟信号输出。


►机器语言是由二进制0和1按一定规则组成的、能被计算机直接理解和执行的指令集合。机器语言中的每一条语句实质上是一条指令。
►汇编语言，将机器指令的代码用英文助记符来表示，如MOV表示数据传送、ADD表示加、JMP表示程序跳转、HLT表示停机等。

►高级语言是接近人的自然语言和数学公式的程序设计语言。分为编译型和解释型两种。

►编译是用编译器（compiler）程序把高级语言所编写的源程序翻译成用机器指令表示的目标代码，使目标代码和源程序在功能上完全等价，通过连接器（linker）程序将目标程序与相关库连接成一个完整的可执行程序。

►优点是执行速度快，产生的可执行程序可以脱离编译器和源程序独立存在，反复执行。


►解释是用解释器（interpreter）程序将高级语言编写的源程序逐句进行分析翻译，解释一句，执行一句。当源程序解释完成时目标程序也执行结束，下次运行程序时还需要重新解释执行。
►优点是移植到不同平台时不用修改程序代码，只要有合适的解释器即可。


►当前主流编程语言可以分为11个大类，分别为：
►1.解释型(PHP,Perl,Python,Ruby,Tcl,Lua,JavaScript,Io)
►2.操作系统自动化型(POSIX Shell,AppleScript,PowerShell)
►3.C和C++风格(C,C++,Objective C,Java,C#)
►4.Pascal风格(Pascal,Ada,PostgreSQL,MySQL)
►5.Lisp类(Common Lisp,Scheme,Clojure,Emacs Lisp)
►6.类型推理类(Standard ML,OCaml,Scala,Haskell)
►7.声明型(Prolog,Erlang,Oz)
►8.堆栈式语言(Forth,PostScript,Factor)
►9.数据转换(SQL,Awk,Pig,XSLT)
►10.计算机代数(Maxima,Mathematica,Sage)
►11.数字分析类(Fortran,MATLAB,R,NumPy)

►TPCI（TIOBE Programming Community Index）编程语言排行榜
►编程语言流行程度的业内指标所依据的数据调查自世界范围内的资深软件工程师和软件厂商

►利用计算机解决现实问题，称为问题求解（problem solving）

►计算机问题求解的基本步骤为：
►（1）确定数学模型或数据结构。
►（2）算法分析和描述。
►（3）编写程序。
►（4）程序测试。


►计算科学思维是多维度的，例如基于计算技术的普适思维，特点是抽象和构造；基于算法思想的数学思维，特点是形式化和自动化；基于数据技术的逻辑思维，特点是因果关系和相关关系；基于系统结构的应用思维，特点是整体性和结构性。

►程序最重要的两个基本要素是算法和数据结构，编程的难点不是算法或者数据结构本身，而是如何理解和分解问题，并将其映射到最合适的算法或数据结构上，这个映射本身不是程序要解决的问题，是人脑在思维，是构造性思维、逆向思维、猜想与试验、设计思维等全脑思维的艺术。

►算法（Algorithm）是为了求解问题而采取确定的、按照一定次序进行的操作步骤，它的基本要素是完成什么操作以及完成操作的顺序如何控制。

►算法特性
►①有穷性，一个算法应包含有限的操作步骤，而不能是无限的；
►②确定性，算法中每一个步骤都应当是确定的，而不应当是含糊的或模棱两可的；
►③有效性，算法中每一个步骤都应当能有效地执行，并得到确定的结果；
►④算法可以有零个或多个输入，这些输入取自于特定对象的数据集合；
►⑤算法可以有一个或多个输出，没有输出的算法没有任何实际意义。


►三种基本结构作为表示算法的基本单元，分别是顺序结构、选择结构、循环结构

►计算 1 - 1/2 + 1/3 - 1/4 + 1/5 + ... + 1/99 - 1/100
BEGIN
    t = 1
    n = 1
    sum =0
    while(n<=100){
        sum = sum + t/n;
        t = -1 × t; //控制正负
        n++;
    }
END


►结构化程序设计（structured programming）是进行以模块功能和处理过程设计为主的详细设计的基本原则。
►①自顶向下、逐步细化；
►②模块化设计；
►③使用三种基本结构。

►面向对象程序设计OOP（object oriented programming）吸收了结构化程序设计的全部优点，以现实世界的实体作为对象，每个对象都有自身的属性和行为特征。
►①类和对象；
►②封装与信息隐蔽；
►③抽象；
►④继承与重用；
►⑤多态性；
►⑥消息传送与处理。

►1．并行程序设计
►2．组件技术 （Component Object Model，组件对象模型）
►3．面向切面编程（Aspect Oriented Programming，AOP）

►1．C语言字符集,C语言语法允许使用的字符的集合称为C语言字符集。

►4．关键字
►关键字又称为保留字，是C语言规定的有特定含义的词语。
C99标准定义了37个关键字，如教材附录所列，主要是关于
数据类型和语句的词语。

►5．标识符
►①标识符只能由大小写字母、数字和下划线组成，且第一个字符必须是字母或下划线；
►②字母是大小写区分的，即大写字母和小写字母被认为是两个不同的字符。
►③标识符不能是C语言的关键字。
►④C语言标准没有具体规定标识符长度的限制，但各个C语言编译器都有自己的规定。例如Visual C++和GCC最大允许32个字符，超出这个长度编译器不识别。
►⑤C语言编译规律是从程序文件第一行开始直至结束，逐一扫描程序代码，检查任何词语在之前是否有明确的定义或声明，若没有则报告出错。

#include <stdio.h> //标准输入输出函数库
//主函数
int main(){
    printf("hello,world\n"); //输出
    return 0; //主函数正常结束返回0
}

编写求两个数之和的程序。
#include <stdio.h>
int main(){
    int a, b, sum;
    scanf("%d%d", &a, &b);
    sum = a + b;
    printf("a + b = %d\n", sum);
    return 0;

}

#include <math.h>
double root(double x, double y){
    return (x >= y)? sqrt(x - y) : 0;
}

►3．C程序结构
►一个C程序可以书写在单个文件中，也可以书写在多个文件中，即C程序包含若干源程序文件。
►每个源程序文件可以单独编译，多个文件分别编译后通过连接把它们合并成一个可执行程序。
►对于大型程序来说，分成多个源程序文件会显著提高编译效率。


►为了编译、连接和运行C程序，必须要有相应的编译器。目
前常用的编译器有：
►①Visual C++，简称为VC，版本有6.0、2005、2008等，适用于Windows操作系统；►Microsoft Dreamspark下载 https://www.dreamspark.com/
►②GNU Compiler Collection，简称为GCC，适用于Windows、Linux操作系统；http://gcc.gnu.org/ http://www.codeblocks.org/

►编码风格（coding style）是指编写程序代码的基本原则。
►缩进格式
►规范命名
►Linux编程规范
►微软编程规范
►Google编程规范
►本课程遵循Linux编程规范，学习者可从互联网
►http://refspecs.linuxfoundation.org/lsb.shtml

►C语言数据类型
基本数据类型
    整型:   short int, int, long int
    浮点型: float, double, long double
    字符型(char)
    空类型(void)
构造类型
    数组
    结构体(struct)
    共用体(union)
    枚举(enum)
指针


►int 型数据的内存长度与系统平台相关，通常int型为机器的一个字长，short 型不比 int 型长，long 型不比 int 短。
►整型还分有符号（signed）和无符号（unsigned）类型，其中signed书写时可以省略。
►超过最大值的有符号整型数值会向上溢出变成负数，超过最小值的数据会向下溢出变成正数。
►C语言浮点型又称实型，分为单精度（float）、双精度（double）和长双精度（long double）3种。
►在VC中规定float型在内存中占用4个字节，提供7位有效数字；double型和long double型在内存中占用8个字节，提供16位有效数字。在GCC中long double型在内存中占用12个字节，提供19位有效数字。

►因为浮点型数据长度和精度是有限的，所以浮点数存在舍入误差和计算误差。
►一个较大的浮点数与一个很小的浮点数做加法时，由于精度限制使得很小的浮点数被忽略了，从而使得这样的加法无意义。
►两个浮点数做比较，由于有误差很难做到绝对相等，只能通过它们差的绝对值小于一个很小的数来判断是否近似相等。
►C语言字符型分为有符号（signed char）和无符号（unsigned char）两种，其中signed书写时可以省略。字符型数据在内存中占用1个字节，采用二进制形式存储。
►字符型数据可以存储整型数值，有时也称为字节型。字符型数据存储整数时的内存形式与整型一样，只不过其数值范围要小得多。
►常量（constant）是指程序中其值不能被修改的数据，分为字面常量和符号常量。
►从字面形式即可识别的常量称为字面常量，例如64、3.1415926和 A 等。

►一个整型常量可以用3种不同的方式表示：
►（1）十进制整数。
• 以非零十进制数1～9组成的整数，例如13579,-24680等。
►（2）八进制整数。
• 以0开头和八进制数0～7组成的整数，例如0，012，0177等。
►（3）十六进制整数。
• 以0x或0X开头和十六进制数0～9、A～F或a～f组成的整数（字母大小写任意），例如0x1234，0xab，0xCF等

►整型常量从字面上区分数据类型的方法是：
（1）整型常量默认的类型为int型。根据系统平台，若int和long型数据占用内存大小相同，则一个int型常量也是long型常量。若int和short型数据占用内存大小相同，则一个int型常量也是short型常量。
（2）一个整数如果其值在范围内，则它是short型。
（3）一个整数如果其值超出上述范围，但在范围内，则它是long型。
（4）在一个整数值后面加一个字母l或L，则它是long型。例如123是int型，123L是long型。后缀符号一般用L而不用小写的l，避免与数字1混淆。
（5）整数默认是signed型，在一个整数后面加一个字母u或U，则它是unsigned型。

022 //八进制表示
0x12 //十六进制表示
0 //signed int
168 //signed int
168U //unsigned int
2147483647 //signed long
-1L //signed long
65535Lu //unsigned long

►一个浮点型常量可以用两种不同的方式表示：
• （1）小数形式。由小数点、十进制整数和小数组成的浮点数，如1.234、-567.89等。整数和小数可以省略其中之一，但不能省略小数点，如.123、123.、0.0等。
• （2）指数形式，又称科学记数法表示。以f E n或 f e n格式组成的浮点数，其中E或e表示以10为低的幂，n为指数且必须是整型，f可以是整数或小数。
• 1.2e3= 1.2 x 10^3


►浮点型常量默认为double型。若在浮点数后面加一个字母f或F，则它是float型。若在浮点数后面加一个字母l或L，则它是long double型。
f=1.23; //默认double
f=1.23f; //float
f=1.23L; //long double

• 字符常量表示的是一个字符，存储的是该字符的ASCII码值。例如‘A’表示英文字符A，数据值是65；‘2’表示数字字符2，数据值是50。
►字符'2'和整数2的写法是有区别的，前者是字符常量，后者是整型常量，它们的含义和在内存中的存储形式完全是不相同的。

• 采用转义字符可以表示ASCII字符集中不可打印或不方便输入的控制字符和其他特定功能的字符。
►C语言规定通用转义字符在3位或不足3位的第一个非八进制数处结束，或在2位或不足2位的第一个非十六进制数处结束。
示例
• \1234 3位 \123和4
• \128  2位 \12和8
• \19   1位 \1和9
• \9    错误
• \0xhh 错误

►由于字符型数据在内存中只占用1个字节，即使按无符号处理其最大值也仅是255（八进制为377），因此ooo的数值范围为0～377（八进制），其他值使得字符型数据溢出。同理，hh的数值范围为0～FF。

►以一对双引号（“ ”）括起来的零个或多个字符组成的字符序列称为字符串常量，ASCII字符集或多字节字符集（如汉字、日韩文字等）都可以组成字符串。
►双引号是字符串常量的边界符，不是字符串的一部分，如果在字符串中要出现双引号应使用转义字符（\“）。

►字符串常量是数组的一种常量形式，请不要将字符串常量与字符常量混淆，二者相比有很大的区别：
►（1）边界符不同。
►（2）字符数不同。
►（3）在内存中的存储形式不同。

►C语言允许将两个相邻的仅由空格、TAB或换行分开的字符串常量，连接成一个新字符串常量。这使得可以用多行书写长的字符串常量
printf("C" " Programming"
" Language");

►符号常量定义形式为：#define 标识符 常量值 如:#define PI 3.1415926
►其中#define是宏定义命令，作用是将标识符定义为常量值，在程序中所有出现该标识符的地方均用常量替换。

►在程序运行期间其值可以改变的量称为变量（variable）。变量实际上就是计算机中的一个内存单元。
►C语言规定变量应该有一个名字，用变量名代表内存单元。
►C语言通过定义变量时指定其数据类型来确定内存单元的大小，不同的数据类型有不同的数据形式和存储形式，需要一定数量（单位为字节）的内存单元。
►除变量名和数据类型之外，变量还有地址、作用域、生命周期等属性。
►C语言变量必须“先定义，后使用”，定义变量的一般形式是：类型 变量名列表;
►在变量定义的同时给变量一个初值，称为变量初始化（initialized），一般形式为： 类型 变量名1=初值1, 变量名2=初值2...;
►定义变量后，可以通过赋值语句为变量赋予新的数据，一般形式为：变量名 = 表达式;

• auto是变量默认的存储类别，称为自动变量；
• static是静态存储类别的变量，称为静态变量；
• register称为寄存器变量。

auto 类型 变量名[=初值], ......
register 类型 变量名[=初值], ......
static 类型 变量名[=初值], ......
extern 类型 变量名, ......


►1．const限定
►在变量定义前加上const修饰，这样的变量称为只读变量（read-only variable）或常变量（constant variable）
►它在程序运行期间不能被修改。其定义的一般形式为: const 类型 变量名列表;


►2．volatile限定
►在变量定义前加上volatile修饰，这样的变量称为隐式存取变量，它表示变量在程序运行期间会隐式地（不明显地）被修改。
►在变量定义前加上volatile修饰，“阻止”编译器对这样的变量进行优化。

示例
int x=5 , m;
volatile int y=6;
m = x*x; //两次读取 x 被编译器优化为只读一次,再计算平方。
m = y*y; //不允许优化，则先取一次y，再取一次y，这才是最真实的计算,因为两次取y之间,y 值可能会变化。


►求解问题的基本处理是运算。
►1．运算对象的数目
►运算符所连接的运算对象的数目称为运算符的目
►（1）单目运算符（unary operator）。只有一个运算对象，其表达式形式分为两种：
►前缀单目运算符 op expr
►后缀单目运算符 expr op

►（2）双目运算符（binary operator）。包含两个运算对象，其表达式形式为： expr1 op expr2
►（3）三目运算符（ternary operator）。包含三个运算对象，C语言中只有一个三目运算符，即条件运算符，其表达式形式为：expr1 ? expr2 : expr3

►2．运算符的优先级
►同一个式子中不同的运算符进行计算时，其运算次序存在先后之分，称为运算符的优先级（precedence）。运算时先处理优先级高的运算符，再处理优先级低的运算符。

►3．运算符的结合性
►在一个式子中如果有两个以上同一优先级的运算符，其运算次序是按运算符的结合性（associativity）来处理的。
►C语言运算符分为左结合（方向）和右结合（方向），左结合自左向右处理，右结合自右向左处理。

►示例
a + b + c   => (a + b) + c      //+为自左向右
a += b *= c => a += (b *= c)    //+=、*=为自右向左

►4．运算符对类型的要求
►C语言运算符对运算对象的数据类型有要求。例如求余运算符要求两个运算对象必须是整型，否则产生编译错误。


►5．表达式
►由运算符和运算对象组成的式子称为表达式（expression），最简单的表达式仅包含一个常量或变量，含有两个或更多运算符的表达式称为复合表达式（compound expression）。

►（2）表达式的计算是按步骤执行的，称为表达式求值顺序（order of evaluation）。
x > y && x < z //先计算x>y，若结果为假则运算结束，然后计算x<z


►多数编译器在不影响计算结果时采用从左向右的数学习惯处理表达式的求值顺序，而且结合最多的运算符号。
x+++y => (x++) + y //因为无论如何,结果都相当于: x + y + 1


►（3）表达式的运算需要考虑参与运算的数据对象是否具有合法的数据类型以及是否需要进行类型转换。
►多个字符组成的运算符是一个整体,中间不能带有空格。


已知int x 是一个四位数, 求 x 的千位、百位、十位、个位数。
解：x/1000为千位数，x/100%10为百位数, x/10%10为十位数, x%10为个位数。

已知每45行文字要用一页纸来写，求n行文字需要多少页。
解：设计n为整型，设需要pages页，则 pages=(n-1)/45+1。


已知a、b为正整数,且 a < b，求a、b的平均值
解:（a+b）/2, 算法是对的,但程序运算可能会出错, 因为 a+b 可能会越界溢出, 更好的做法: (b-a)/2+a


将两个整型变量a和b的值相互交换
a = a - b; b = b + a; a = b - a

►（1）赋值运算符与运算对象构成的式子称为赋值表达式。它本身也可以当作一个普通的表达式项参与运算。
►（2）赋值运算符要求运算对象expr的类型应与lvalue类型相同，如果不相同会自动将expr的类型转换成lvalue的类型再赋值。转换过程中可能会产生精度丢失、数据错误等。

►类型转换有两种：隐式类型转换和显式类型转换。
►隐式类型转换（implicit type conversion）又称自动类型转换，它是由编译器自动进行的。
►编译器根据需要，在算术运算、赋值、函数调用过程中将一种数据类型的数据自动转换成另一种数据类型的数据。

►1．何时进行隐式类型转换
►编译器在必要时将类型转换规则应用到C语言内置数据类型的对象上，在下列情况下，将发生隐式类型转换。

►（1）在混合类型的算术运算、比较运算、逻辑运算表达式中，运算对象被转换成相同的数据类型。如：
int m=10,n=20;
m=m*1.5+n*2.7; //发生隐式类型转换
m+n>30.5 //发生隐式类型转换

►（2）用表达式初始化变量时，或赋值给变量时，该表达式被转换为该变量的数据类型。如：
int x=3.1415926; //发生隐式类型转换
x=7.8; //发生隐式类型转换

►（3）调用函数的实参被转换为函数形参的数据类型。如：
max(5.6,6.7); //若函数原型参数为整型，则发生隐式类型转换

►2．混合运算中的隐式类型转换
►在表达式中经常有不同类型数据之间的运算，称为混合运算。
►如：10 + 'a' + 150 / 1.5 - 3.7 * 'b'

►算术运算中，如果运算符的两个运算对象是不同的类型，C语言会在计算表达式之前自动转换成同一种类型后才进行运算。
►转换的规则按“存储空间提升原则”进行，即存储空间小的类型转换成存储空间大的类型，或精度低的类型转换成精度高的类型，以保证运算结果尽可能精确。

►4．赋值运算中的隐式类型转换如果赋值运算符左右两边的类型不一致，且都是数值型数据时，在赋值时需要进行隐式类型转换。
►即先计算等号右侧表达式的值，转换成与左侧变量相同的类型，再赋值。


►（1）将浮点型数据赋给整型变量时，舍弃浮点数的小数部分。如n是整型变量，n=6.18的结果是n的值为6。
►（2）将整型数据赋给浮点型变量时，数值不变，但以浮点数形式存储到变量中。如78按78.0处理（根据浮点类型分别有7位或16位有效数字）。
►（3）将double型数据赋给float变量时，截取前面7位有效数字存储到float变量。将float型数据赋给double变量时，数值不变，有效数字扩展到16位。
►（4）将char型数据赋给short、int变量时，数据存储到变量的低8位，高位补0。将short、int型数据赋给字符型变量时，只将数据的低8位存储到字符型变量中。
►（5）将unsigned short型数据赋给int、long变量时，数据存入低位，高位补0。将short型数据赋给int、long变量时，数据存入低位，高位补0或者补1。
►（6）将存储空间长度大的整型赋值给小的整型时，低字节复制，高字节“丢弃”。将长度相同的无符号和有符号整型相互赋值时，符号位与数值位同时复制。

►（2）显式类型转换的目的是人为进行类型转换，使不同类型数据之间的运算进行下去。显式类型转换后会产生一个指定类型的临时数据对象继续参与运算。
►设计程序时还是尽量设计好数据类型及其表达式，以减少不必要的类型转换。

►语句（statement）是C程序的最小单位。
►程序由一条一条语句组成，语句执行的次序则称为流程。

►复合语句内的每条语句必须以分号结尾，但复合语句右大括号表示结尾，因此其后不需要分号。如果在后面添加分号，意思变为一个复合语句与一个空语句。
►复合语句内部可以进行变量定义或类型声明，这些定义或声明仅在复合语句内部可以使用，称为块的局部作用域。

►由于行是多数编译器在编译或调试时的基本单位，即使编译器指明了某一行有错误也不能明确判明是哪个语句出错，因此在一行里写多个语句的风格并不好。

►请注意，如果//注释后面不幸地有一个行连接符，那么下一行也依然是注释。
 int t, a=10, b=7; // 本行的注释\
 t=a, a=b, b=t;    <= 此行也被注释

putchar('c');
getchar()


scanf("a=%db=%d", &a, &b); //如果输入”a=34b=56”，则a=34,b=56,格式要求（a= b=）与实际输入匹配
►C语言规定，goto语句只能在函数内部跳转，不能跳转到别的函数中。


double aaa(double a, double b, double c){
    if( a + b > c && a + c > b && b + c > a){
        double t;
        t = (a + b + c) / 2.0
        return sqrt((t - a) * (t - b) * (t - c) * t);
    }

}

（2）switch语法中各个case分支和default分支的出现次序在语法上没有规定，但次序的不同安排会影响执行结果。
（3）switch语法中default分支是可选的，若没有default分支且没有任何case标号的值相等时，switch语句将什么也不做，直接执行后续语句。

►嵌套中的if与else的配对关系原则为：else总是匹配给上面相邻尚未配对的if。如果if和else的数目不对应，使用复合语句来明确配对关系。


char[] bbb(int y, int m, int d){
    switch(m){
        case 2 :
            days = 28;
            if((y % 4 == 0 && y & 100 != 0) || y % 400 == 0) days++;//闰年
        case 4:
        case 6:
        case 9:
        case 11: days = 30; break;
        default: days = 31;
    }
    d++;
    if(d > days) d = 1, m++;
    if(m > 12) m = 1, y++;
    return y-m-d

}

fff(int m, int d){
    
    t = m < 7? 21: 23;
    if(d >= t) m++;
    switch(m){
        case 2 : printf("宝瓶\n");break;
        case 3 : printf("双鱼\n");break;
        case 4 : printf("白羊\n");break;
        case 5 : printf("金牛\n");break;
        case 6 : printf("双子\n");break;
        case 7 : printf("巨蟹\n");break;
        case 8 : printf("狮子\n");break;
        case 9 : printf("室女\n");break;
        case 10 : printf("天秤\n");break;
        case 11 : printf("天蝎\n");break;
        case 12 : printf("射手\n");break;
        default : printf("摩羯\n");
    }


}